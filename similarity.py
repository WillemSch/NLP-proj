import re


def similarity_score(phoneme1, phoneme2):
    """
    Scores the similarity of 2 phonemes with respect to rhyming.
    :param phoneme1: String representation of a phoneme according to the simplified arpabet notation as generated by
    NLTK
    :param phoneme2: String representation of a phoneme according to the simplified arpabet notation as generated by
    NLTK
    :return: A score between 0 and 1 where 1 is the highest similarity score.
    """

    if phoneme1 == phoneme2:
        return 1

    ptuple1 = to_tuple(phoneme1)
    ptuple2 = to_tuple(phoneme2)

    phones = sorted([ptuple1[0], ptuple2[0]])

    try:
        score = similarity_dict [phones[0]] [phones[1]]
    except KeyError as _:
        # If there is no entry for the phoneme similarity score is 0
        score = 0

    if score is None:
        score = 0

    # If the phoneme has stress on it adjust score to difference in stress
    if ptuple1[1] is not None and ptuple2[1] is not None:
        difference = abs(int(ptuple1[1]) - int(ptuple2[1]))
        score *= .8 + (.1 * (2 - difference))

    return score


def to_tuple(phoneme):
    """
    Split phonemes into their phonetic description and possible
    :param phoneme: String representation of a phoneme according to the simplified arpabet notation as generated by NLTK
    :return: A tuple of form [String, String|None] where the first part is the phoneme and the second part being a
    possible number representation of the stress of the phoneme.
    """

    match = re.match(re.compile('([A-Z]+)([0-2])?'), phoneme)
    letters = match.group(1)
    addition = match.group(2)
    return [letters, addition]


def score_rhyme(phonemes1, phonemes2):
    if len(phonemes1) != len(phonemes2):
        return 0
    score = 1
    for p1, p2 in zip(phonemes1, phonemes2):
        score *= similarity_score(p1, p2)
    return score


similarity_dict = {
    "AA": {
        "AE": .3,
        "AH": .4,
        "AX": .8
    },
    "AE": {
        "AH": .5,
        "EH": .8
    },
    "AO": {
        "OY": .3
    },
    "UH": {
        "UW": .9
    },
    "EH" : {
        "ER": .5,
        "IH": .2
    },
    "IX" : {
        "IH": .9
    }
}
